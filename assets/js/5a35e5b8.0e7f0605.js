"use strict";(self.webpackChunkfirefox_ecosystem_platform=self.webpackChunkfirefox_ecosystem_platform||[]).push([[9088],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return h}});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),p=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(r),h=n,d=c["".concat(s,".").concat(h)]||c[h]||m[h]||o;return r?a.createElement(d,i(i({ref:t},u),{},{components:r})):a.createElement(d,i({ref:t},u))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}c.displayName="MDXCreateElement"},87352:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return u},default:function(){return c}});var a=r(87462),n=r(63366),o=(r(67294),r(3905)),i=["components"],l={id:"push-development",title:"Development Process",sidebar_label:"Development Process"},s=void 0,p={unversionedId:"platform/firefox-push/push-development",id:"platform/firefox-push/push-development",isDocsHomePage:!1,title:"Development Process",description:"We develop and deploy on a 2 week schedule. A new release is",source:"@site/docs/platform/firefox-push/push-development.md",sourceDirName:"platform/firefox-push",slug:"/platform/firefox-push/push-development",permalink:"/ecosystem-platform/platform/firefox-push/push-development",editUrl:"https://github.com/mozilla/ecosystem-platform/edit/main/website/docs/platform/firefox-push/push-development.md",tags:[],version:"current",frontMatter:{id:"push-development",title:"Development Process",sidebar_label:"Development Process"},sidebar:"docs",previous:{title:"Design, API's, Error Codes",permalink:"/ecosystem-platform/platform/firefox-push/push-design"},next:{title:"History",permalink:"/ecosystem-platform/platform/firefox-push/push-history"}},u=[{value:"Code Development",id:"code-development",children:[{value:"Architecture Discussion &amp; Documentation",id:"architecture-discussion--documentation",children:[]},{value:"Milestones &amp; Waffleboard",id:"milestones--waffleboard",children:[]},{value:"Labels",id:"labels",children:[]},{value:"Versions",id:"versions",children:[]},{value:"Github Workflow",id:"github-workflow",children:[]}]}],m={toc:u};function c(e){var t=e.components,r=(0,n.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"We develop and deploy on a 2 week schedule. A new release is\ntagged and cut a week before deploy, QA files a deployment ticket filed then verifies the release. On occasion a release\nwill get a full suite of load-tests as well."),(0,o.kt)("p",null,"Some of the ancillary Push projects have no set release schedule and are\nreleased as needed."),(0,o.kt)("h2",{id:"code-development"},"Code Development"),(0,o.kt)("h3",{id:"architecture-discussion--documentation"},"Architecture Discussion & Documentation"),(0,o.kt)("p",null,"Architecture changes and proposals are discussed on the\n",(0,o.kt)("a",{parentName:"p",href:"https://groups.google.com/a/mozilla.com/forum/#!forum/push-service"},"Push-Service mail list"),' using the "Design: " subject prefix. When\na topic has been idle at least a week with no further replies it is\nconsidered at the next standup. If the team approves the change, the\nappropriate Github issues are created, and an email sent on the topic\nto the list pointing to the outcome and issue created. Otherwise an\nemail is sent on the topic indicating it will not be implemented.'),(0,o.kt)("h3",{id:"milestones--waffleboard"},"Milestones & Waffleboard"),(0,o.kt)("p",null,"Issues are created in their appropriate repositories. Ownership and triage of\nissues is done via a single Waffleboard that aggregates issue tracking across\nall Push-related repositories."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://waffle.io/mozilla-services/push-service"},"Push Waffleboard"))),(0,o.kt)("h3",{id:"labels"},"Labels"),(0,o.kt)("p",null,"Issues are assigned a priority based on the release the issue is targeted at."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"P1 - Next release"),(0,o.kt)("li",{parentName:"ul"},"P2 - Release after next"),(0,o.kt)("li",{parentName:"ul"},"P3 - No immediate release targeted")),(0,o.kt)("p",null,"P2 issues are promoted to P1 after a release, while P3's are triaged to\ndetermine if they should become P2's at the first standup after a release."),(0,o.kt)("p",null,"The priority tags are applied as Github labels. Other labels will also be\napplied to categorize the issue appropriately."),(0,o.kt)("p",null,"Issues being worked on are moved to the ",(0,o.kt)("strong",{parentName:"p"},"In Progress")," column and assigned to\nthe person working on the issue."),(0,o.kt)("h3",{id:"versions"},"Versions"),(0,o.kt)("p",null,"Push repositories use a {major}.{minor}.{patch} version scheme, with\npatch tags released to address emergency issues in a deployed release.\nMajor versions are generally large re-writes and assumed to possibly\nbreak backwards compatibility."),(0,o.kt)("p",null,"Releases are tagged under ",(0,o.kt)("inlineCode",{parentName:"p"},"release/{major}.{minor}")," branches."),(0,o.kt)("h3",{id:"github-workflow"},"Github Workflow"),(0,o.kt)("p",null,"(Based heavily on ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/servo/servo/wiki/Github-workflow"},"Servo's Workflow"),")"),(0,o.kt)("p",null,"You will need to ",(0,o.kt)("a",{parentName:"p",href:"https://help.github.com/articles/fork-a-repo/"},"fork")," the\nappropriate repository in order to be able to publish your changes. Push Team\nmembers may create a branch in the repo which should reference the issue being\nworked on. In these instructions ",(0,o.kt)("inlineCode",{parentName:"p"},"<mozilla-services>")," is the name of the remote\npointing to the remote at the appropriate repo and ",(0,o.kt)("inlineCode",{parentName:"p"},"<fork>")," is the remote\npointing at your fork of the repository. "),(0,o.kt)("p",null,"All commits should be ",(0,o.kt)("a",{parentName:"p",href:"https://help.github.com/articles/signing-commits-using-gpg/"},"signed"),"."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Fetch the latest code and create a local branch:"),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"$ git fetch <mozilla-services>")),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"$ git checkout -b <local_branch> <mozilla-services>/master")),(0,o.kt)("p",{parentName:"li"},"Name the branch appropriately for the fix/feat/docs commit you're working on.\nIdeally a Pull Request will have a single commit to address the issue."),(0,o.kt)("br",null),(0,o.kt)("br",null)),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Code/hack/do stuff then commit:"),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"$ git commit -S -a ")),(0,o.kt)("p",{parentName:"li"},"Make sure to phrase your commit message appropriately per the Contributing\ndocumentation for the repository. Most Push-related repositories use an\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mozilla-services/autopush/blob/master/CONTRIBUTING.md"},"Angular-based commit style"),"."),(0,o.kt)("p",{parentName:"li"},"Before committing and pushing code, remember to run the appropriate tests\nlocally to avoid having our CI systems reject it. PR's that don't pass the\nautomated tests won't be reviewed until they pass."),(0,o.kt)("br",null),(0,o.kt)("br",null)),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Push local branch to your cloned repository: "),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"$ git push --set-upstream <fork> <local_branch> ")),(0,o.kt)("p",{parentName:"li"}," (",(0,o.kt)("inlineCode",{parentName:"p"},"git push -u <fork> <local_branch>[:remote_name]")," should work if you want to\npublish your changes to a branch with a different name than ",(0,o.kt)("inlineCode",{parentName:"p"},"[local_branch]"),".)"),(0,o.kt)("br",null),(0,o.kt)("br",null)),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create a ",(0,o.kt)("a",{parentName:"p",href:"https://help.github.com/articles/using-pull-requests/"},"PR in GitHub"),". "),(0,o.kt)("p",{parentName:"li"},"If you know who should code review this PR, you can write ",(0,o.kt)("inlineCode",{parentName:"p"},"r? @username"),"\nin the text of the PR and they will automatically be assigned to it.\nIf not, don't worry: a reviewer will be randomly selected and notified."),(0,o.kt)("br",null),(0,o.kt)("br",null)),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Wait for reviewers' feedback - if something needs to be fixed, either amend\nthe existing commits if the changes are minor, or fix it in a new commit on\nthe same branch, optionally using ",(0,o.kt)("inlineCode",{parentName:"p"},"--fixup"),":"),(0,o.kt)("p",{parentName:"li"}," ",(0,o.kt)("inlineCode",{parentName:"p"},"$ git commit -S --fixup=<sha1_of_relevant_commit_on_branch>")),(0,o.kt)("p",{parentName:"li"}," Alternatively, add the following to your ",(0,o.kt)("inlineCode",{parentName:"p"},".gitconfig")," and simply use ",(0,o.kt)("inlineCode",{parentName:"p"},"git fixup"),":"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"[alias]\n    fixup = !sh -c 'git commit -m \\\"fixup! $(git log -1 --format='\\\\''%s'\\\\'' $@ | sed \\\"s/fixup\\\\! //\\\")\\\"' -\n    ri = rebase --interactive --autosquash\n")),(0,o.kt)("br",null),(0,o.kt)("br",null)),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"git push")," to update the Pull Request. Repeat steps 5-6 until the review\nis accepted. If existing commits were amended, a force push will be necessary\n(see step 8)."),(0,o.kt)("br",null),(0,o.kt)("br",null)),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"When you know there is a substantive change on master that affects your\npatch, update ",(0,o.kt)("inlineCode",{parentName:"p"},"<mozilla>")," and rebase your local branch to make sure your\npatch still applies correctly: "),(0,o.kt)("p",{parentName:"li"}," ",(0,o.kt)("inlineCode",{parentName:"p"},"$ git fetch <mozilla-services>")),(0,o.kt)("p",{parentName:"li"}," ",(0,o.kt)("inlineCode",{parentName:"p"},"$ git rebase <mozilla-services>/master")),(0,o.kt)("p",{parentName:"li"}," You may have to fix merge conflicts on the way."),(0,o.kt)("br",null),(0,o.kt)("br",null)),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Force-push your changes: "),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"$ git push -f <fork> <local_branch>")),(0,o.kt)("br",null),(0,o.kt)("br",null)),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Once your patch is accepted and based on a recent master, squash the commits\ntogether for a cleaner history (if requested):"),(0,o.kt)("p",{parentName:"li"}," ",(0,o.kt)("inlineCode",{parentName:"p"},"$ git rebase -i --autosquash <mozilla-services>/master")),(0,o.kt)("br",null),(0,o.kt)("br",null)),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Force push the squashed commits to github (see step 8)."),(0,o.kt)("br",null),(0,o.kt)("br",null)),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},'When the reviewer thinks the code is ready, they will leave a comment\nsaying "r+", meaning "review granted."  Then our bot will\nautomatically test and merge your PR.  Congratulations!'))))}c.isMDXComponent=!0}}]);