"use strict";(self.webpackChunkfirefox_ecosystem_platform=self.webpackChunkfirefox_ecosystem_platform||[]).push([[7587],{63506:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>r});var a=n(87462),i=(n(67294),n(3905));n(8209);const o={id:"device-registration",title:"Device Registration (Sync)",sidebar_label:"Device Registration (Sync)"},s="Firefox Accounts Device Registration",c={unversionedId:"relying-parties/how-tos/device-registration",id:"relying-parties/how-tos/device-registration",title:"Device Registration (Sync)",description:"When using Firefox Accounts to connect a device to Firefox Sync, it is possible to annotate the device's authentication token with additional metadata to improve the user experience. Through the Device Registration API, a device can:",source:"@site/docs/relying-parties/how-tos/device-registration.md",sourceDirName:"relying-parties/how-tos",slug:"/relying-parties/how-tos/device-registration",permalink:"/ecosystem-platform/relying-parties/how-tos/device-registration",draft:!1,editUrl:"https://github.com/mozilla/ecosystem-platform/edit/master/docs/relying-parties/how-tos/device-registration.md",tags:[],version:"current",frontMatter:{id:"device-registration",title:"Device Registration (Sync)",sidebar_label:"Device Registration (Sync)"},sidebar:"docs",previous:{title:"Apple IAP",permalink:"/ecosystem-platform/relying-parties/how-tos/apple-iap"},next:{title:"Metrics",permalink:"/ecosystem-platform/relying-parties/reference/metrics-for-relying-parties"}},d={},r=[{value:"Basic Registration",id:"basic-registration",level:2},{value:"Push Notifications",id:"push-notifications",level:2},{value:"Device Commands",id:"device-commands",level:2},{value:"Example: receiving a tab",id:"example-receiving-a-tab",level:3},{value:"Example: sending a tab",id:"example-sending-a-tab",level:3}],l={toc:r};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"firefox-accounts-device-registration"},"Firefox Accounts Device Registration"),(0,i.kt)("p",null,"When using Firefox Accounts to connect a device to Firefox Sync, it is possible to annotate the device's authentication token with additional metadata to improve the user experience. Through the Device Registration API, a device can:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Customize the way it appears in the list of connected devices, by providing a display name and device type."),(0,i.kt)("li",{parentName:"ul"},"Subscribe to push notification events by providing a webpush subscription endpoint."),(0,i.kt)("li",{parentName:"ul"},"Provide functionality to its peers in an extensible manner by allowing other devices to send it commands, and by sending commands to other devices in turn.")),(0,i.kt)("p",null,"A device may access the user's Sync data using either a sessionToken or an appropriately-scoped OAuth token, so device registration requests may be authenticated using either a sessionToken or an OAuth refresh token with scope ",(0,i.kt)("strong",{parentName:"p"},'"',(0,i.kt)("a",{parentName:"strong",href:"https://identity.mozilla.com/apps/oldsync%22"},'https://identity.mozilla.com/apps/oldsync"')),"."),(0,i.kt)("p",null,"(The refresh token is used rather than an access token, because the device is operating on its own data that is held by the authorization server, rather than exercising its delegated authority to access the user's data on a separate resource server.)"),(0,i.kt)("h2",{id:"basic-registration"},"Basic Registration"),(0,i.kt)("p",null,"Devices can manage their details by POSTing a registration record to ",(0,i.kt)("inlineCode",{parentName:"p"},"/v1/account/device"),", like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'POST /v1/account/device HTTP/1.1\nAuthorization: < sessionToken HAWK header | refreshToken Bearer header >\n{\n  "name": "my custom name",\n  "type": "desktop"\n}\n------\nHTTP/1.1 200 OK\n{\n  "id": "d3fc82acca7fc8c50acc06d21babbc00",\n  "name": "my custom name",\n  "type": "desktop"\n}\n')),(0,i.kt)("p",null,"The server allocates a unique ID for each device, which can be provided to update an existing device registration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'POST /v1/account/device HTTP/1.1\nAuthorization: < sessionToken HAWK header | refreshToken Bearer header >\n{\n  "id": "d3fc82acca7fc8c50acc06d21babbc00",\n  "name": "my new name"\n}\n------\nHTTP/1.1 200 OK\n{\n  "id": "d3fc82acca7fc8c50acc06d21babbc00",\n  "name": "my new name",\n  "type": "desktop"\n}\n')),(0,i.kt)("p",null,'Supported device type values include "desktop", "mobile", "tablet", "vr" and "tv".'),(0,i.kt)("h2",{id:"push-notifications"},"Push Notifications"),(0,i.kt)("p",null,"Devices can receive timely updates on account lifecycle events by providing a ",(0,i.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/push-api/#push-subscription"},"push subscription")," to which to server can publish notifications."),(0,i.kt)("p",null,"The push subscription consists of three fields: a public key and authentication secret that can be used to encrypt the notification, and a callback URL to which it should be sent. These can be provided in the device record either during initial registration, or as an update like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'POST /v1/account/device HTTP/1.1\nAuthorization: < sessionToken HAWK header | refreshToken Bearer header >\n{\n  "id": "d3fc82acca7fc8c50acc06d21babbc00",\n  "pushCallback": "https://updates.push.services.mozilla.com/ggYxFjPEjSM/Cg9Et44JFpg",\n  "pushPublicKey": "jXPJHE7-n3cNZGyYBd0yz1BA0V1uLOn-QnOg4kOS1r-oHHep5lQc8KHySevTwVPmcS0oTs_MICMjoYCgA6979Hg",\n  "pushAuthKey": "Wj18qUd0YS2-9vob79WdWg"\n}\n------\nHTTP/1.1 200 OK\n{\n  "id": "d3fc82acca7fc8c50acc06d21babbc00",\n  "name": "my custom name",\n  "type": "desktop",\n  "pushCallback": "https://updates.push.services.mozilla.com/ggYxFjPEjSM/Cg9Et44JFpg",\n  "pushPublicKey": "jXPJHE7-n3cNZGyYBd0yz1BA0V1uLOn-QnOg4kOS1r-oHHep5lQc8KHySevTwVPmcS0oTs_MICMjoYCgA6979Hg",\n  "pushAuthKey": "Wj18qUd0YS2-9vob79WdWg"\n}\n')),(0,i.kt)("p",null,"Once a webpush subscription is registered, the device will receive push notifications that match the JSON schema defined in ",(0,i.kt)("a",{parentName:"p",href:"../lib/pushpayloads.schema.json"},(0,i.kt)("inlineCode",{parentName:"a"},"pushpayloads.schema.json")),'. For legacy reasons, FxA may send an empty push notification to indicate that an account has become verified. All other notifications will have a "command" field indicating the type of event, and a "data" field containing an object with additional event-specific data.'),(0,i.kt)("p",null,"The currently supported notifications are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"An empty notification.  This indicates that the user's account has become verified and the device can start syncing data."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fxaccounts:device_connected"),":  A new device has been connected to the account.  The device may wish to update any cached list of other connected devices."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fxaccounts:device_disconnected"),":  A device has been disconnected from the account. The ",(0,i.kt)("inlineCode",{parentName:"li"},"data")," field will have an ",(0,i.kt)("inlineCode",{parentName:"li"},"id")," attribute identifying the disconnected device.  If this matches the device's own id then it should immediately discard any cached authentication tokens."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fxaccounts:profile_updated"),":  The user's profile information has changed, such as display name or email address."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fxaccounts:password_changed"),":  The user's password has changed.  The device should discard any cached authentication tokens and prompt the user to re-enter their password."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fxaccounts:password_reset"),":  The user's password has changed. The device should discard any cached authentication tokens and prompt the user to re-enter their password."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fxaccounts:account_destroyed"),":  The user has deleted their account. The device should discard any cached authentication tokens and sign the user out."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fxaccounts:command_received"),":  Another device has invoked one of this device's advertised commands.  See the next section for more details.")),(0,i.kt)("h2",{id:"device-commands"},"Device Commands"),(0,i.kt)("p",null,'Connected devices may be able to offer functionality to one another on a peer-to-peer basis, such as the ability to send a tab from one device to another. To support this in a flexible and extensible manner, FxA allows devices to advertize their support for arbitrary "commands" that can be invoked by other devices. The FxA server will forward command invocations from one device to another without attempting to define or enforce any particular semantics on them.'),(0,i.kt)("p",null,'By way of example, here is how two devices could use the commands functionality to implement the "send tab to device" feature of Firefox Sync.'),(0,i.kt)("h3",{id:"example-receiving-a-tab"},"Example: receiving a tab"),(0,i.kt)("p",null,"First, the devices must agree on a well-known name to identify the command. It's useful to use a URI for this purpose in order to avoid naming conflicts, such as \"",(0,i.kt)("a",{parentName:"p",href:"https://identity.mozilla.com/cmd/open-uri%22"},'https://identity.mozilla.com/cmd/open-uri"')),(0,i.kt)("p",null,'A device wishing to receive tabs sent from other devices would first generate an ECDH keypair that can be used to encrypt the tab data while it\'s in transit. It would encrypt the public key component using a symmetric encryption key that is shared by all connected devices, such as the sync master key. It would then advertize its support for this command by including the "availableCommands" field in its device registration record, like this:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'POST /v1/account/device HTTP/1.1\nAuthorization: < sessionToken HAWK header | refreshToken Bearer header >\n{\n  "name": My Firefox",\n  "type": "desktop",\n  "pushCallback": "https://updates.push.services.mozilla.com/ggYxFjPEjSM/Cg9Et44JFpg",\n  "pushPublicKey": "jXPJHE7-n3cNZGyYBd0yz1BA0V1uLOn-QnOg4kOS1r-oHHep5lQc8KHySevTwVPmcS0oTs_MICMjoYCgA6979Hg",\n  "pushAuthKey": "Wj18qUd0YS2-9vob79WdWg"\n  "availableCommands": {\n    "https://identity.mozilla.com/cmd/open-uri": "...encrypted public key..."\n  }\n}\n')),(0,i.kt)("p",null,"When another device invokes this command, FxA will send a ",(0,i.kt)("inlineCode",{parentName:"p"},"command_received")," push notification to the receiving device with a payload like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'{\n  version: 1,\n  command: "fxaccounts:command_received",\n  data: {\n    "command": "https://identity.mozilla.com/cmd/open-uri",\n    "sender": "0a4abb5e6f2e378f3aadda7f97482e99",\n    "url": "https://api.accounts.firefox.com/v1/device/commands?index=42&limit=1"\n  }\n}\n')),(0,i.kt)("p",null,"Since push notifications can only contain a limited amount of data, the notification includes a URL at which to fetch the full command payload, which the device would load like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'GET https://api.accounts.firefox.com/v1/device/commands?index=42&limit=1\nAuthorization: < sessionToken HAWK header | refreshToken Bearer header >\n------\nHTTP/1.1 200 OK\n{\n  index: 42,\n  last: true,\n  messages: [\n    {\n      index: 42,\n      data: {\n        command: "https://identity.mozilla.com/cmd/open-uri",\n        sender: "0a4abb5e6f2e378f3aadda7f97482e99",\n        payload: "...encrypted tab data payload..."\n      }\n    }\n  ]\n}\n')),(0,i.kt)("p",null,"Finally, the device would validate and decrypt the command payload using its private key and display the requested page."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"/v1/account/device/commands")," endpoint allows fetching multiple messages, and paging through the available messages, using the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.google.com/document/d/1YT6gh125Tu03eM42Vb_LKjvgxc4qrGGZsty1_ajf2YM/edit?ts=5aefb8ad#heading=h.42fonoxbbyaz"},"pushbox API"),'.  The "index" field acts as a pointer into the message stream,while the "last" field indicates whether any more messages remain. A client wishing to fetch all available commands could page through the results like this:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"let prev_index = <last seen index value>\nall_commands = []\n{ messages, index, last } = get(`/v1/account/device/commands?index=${prev_index}&limit=10`)\nall_commands.push(...messages)\nwhile not last:\n  prev_index = index\n  { messages, index, last } = get(`/v1/account/device/commands?index=${prev_index}&limit=10`)\n  all_commands.push(...messages)\n")),(0,i.kt)("p",null,"However, clients are encouraged not to poll for commands in this manner unless they believe that they may have missed a push notification, such as if their push subscription was invalidated."),(0,i.kt)("h3",{id:"example-sending-a-tab"},"Example: sending a tab"),(0,i.kt)("p",null,"When a device wants to send a tab, it can use the device registration API to find other connected devices and their available commands:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'GET /v1/account/devices HTTP/1.1\nAuthorization: < sessionToken HAWK header | refreshToken Bearer header >\n------\nHTTP/1.1 200 OK\n[\n  {\n    "id": "d3fc82acca7fc8c50acc06d21babbc00",\n    "name": My Firefox",\n    "type": "desktop",\n    "pushCallback": "https://updates.push.services.mozilla.com/ggYxFjPEjSM/Cg9Et44JFpg",\n    "pushPublicKey": "jXPJHE7-n3cNZGyYBd0yz1BA0V1uLOn-QnOg4kOS1r-oHHep5lQc8KHySevTwVPmcS0oTs_MICMjoYCgA6979Hg",\n    "pushAuthKey": "Wj18qUd0YS2-9vob79WdWg"\n    "availableCommands": {\n      "https://identity.mozilla.com/cmd/open-uri": "...encrypted public key..."\n    }\n  },\n  {\n    "id": "0a4abb5e6f2e378f3aadda7f97482e99",\n    "name": My Fennec",\n    "type": "mobile",\n    "pushCallback": "https://updates.push.services.mozilla.com/ggYxFjPEjSM/Cg9Et44JFpg",\n    "pushPublicKey": "jXPJHE7-n3cNZGyYBd0yz1BA0V1uLOn-QnOg4kOS1r-oHHep5lQc8KHySevTwVPmcS0oTs_MICMjoYCgA6979Hg",\n    "pushAuthKey": "Wj18qUd0YS2-9vob79WdWg"\n    "availableCommands": {}\n  }\n]\n')),(0,i.kt)("p",null,'It can identify possible target devices by looking in the "availableCommands" field. When a target is selected, it can decrypt the associated command metadata bundle to obtain the device\'s public key, and use that to construct an encrypted payload of tab data.'),(0,i.kt)("p",null,'It can then invoke the target device\'s "open-uri" command like so:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'POST /v1/account/devices/invoke_command HTTP/1.1\nAuthorization: < sessionToken HAWK header | refreshToken Bearer header >\n{\n  "target": "d3fc82acca7fc8c50acc06d21babbc00",\n  "command": "https://identity.mozilla.com/cmd/open-uri",\n  "payload": "...encrypted tab data payload..."\n}\n')),(0,i.kt)("p",null,"The FxA server will store this command into the command queue for the target device, and send it a ",(0,i.kt)("inlineCode",{parentName:"p"},"fxaccounts:command_received")," push notification, causing it to fetch the command via the procedure outlined above."))}p.isMDXComponent=!0}}]);